#!/usr/bin/env python3
# wool-painting/mc-wool.py
# 2017.10.17 by liftA42.
from PIL import Image  # open and create image in popular formats
import sys  # for argv
import os.path as path  # for file name operation


COLORS = {
    'White':    (0xE9, 0xEC, 0xEC),
    'Orange':   (0xF0, 0x76, 0x13),
    'Magenta':  (0xBD, 0x44, 0xB3),
    'Light blue':   (0x3A, 0xAF, 0xD9),
    'Yellow':   (0xF8, 0xC6, 0x27),
    'Lime':     (0x70, 0xB9, 0x19),
    'Pink':     (0xED, 0x8D, 0xAC),
    'Gray':     (0x3E, 0x44, 0x47),
    'Light gray':   (0x8E, 0x8E, 0x86),
    'Cyan':     (0x15, 0x89, 0x91),
    'Purple':   (0x79, 0x2A, 0xAC),
    'Blue':     (0x35, 0x39, 0x9D),
    'Brown':    (0x72, 0x47, 0x28),
    'Green':    (0x54, 0x6D, 0x1B),
    'Red':      (0xA1, 0x27, 0x22),
    'Black':    (0x14, 0x15, 0x19)
}


def select_closest_color(origin_color):
    (origin_r, origin_g, origin_b) = origin_color
    best_color = 'Undecided'
    best_distance = 3 * (0xFF - 0) ** 2 + 1  # out of legal range
    for color in COLORS:
        (standard_r, standard_g, standard_b) = COLORS[color]
        distance = (origin_r - standard_r) ** 2 + \
            (origin_g - standard_g) ** 2 + (origin_b - standard_b) ** 2
        if distance < best_distance:
            best_color = color
            best_distance = distance
    if best_color == 'Undecided':
        raise Exception('Can not decide color for {}'.format(origin_color))
    return best_color


def average_color(load_object, x_range, y_range):
    (sum_r, sum_g, sum_b) = (0, 0, 0)
    for x in x_range:
        for y in y_range:
            (r, g, b) = load_object[x, y]
            (sum_r, sum_g, sum_b) = (sum_r + r, sum_g + g, sum_b + b)
    # print(x_range, y_range)
    pixel_count = (x_range[-1] - x_range[0] + 1) * \
        (y_range[-1] - y_range[0] + 1)
    return (sum_r // pixel_count, sum_g // pixel_count, sum_b // pixel_count)


def convert_image(load_object, original_size, ideal_size):
    (origin_width, origin_height) = original_size
    (width, height) = ideal_size
    map_ratio = width / origin_width
    new_image = dict()
    color_count = dict()
    for mapped_x in range(width):
        for mapped_y in range(height):
            start_x = int(mapped_x * map_ratio)
            end_x = int((mapped_x + 1) * map_ratio)
            start_y = int(mapped_y * map_ratio)
            end_y = int((mapped_y + 1) * map_ratio)
            # basic assert for a too stupid brain
            if start_x not in range(origin_width) or \
                end_x not in range(origin_width + 1) or \
                start_y not in range(origin_height) or \
                end_y not in range(origin_height + 1):
                raise Exception('Map to illegal value. '
                    'Origin size: {}. Ideal size: {}' \
                    .format(original_size, ideal_size))
            # print(start_x, end_x, start_y, end_y)
            average = average_color(load_object, range(start_x, end_x),
                range(start_y, end_y))
            closest = select_closest_color(average)
            new_image[mapped_x, mapped_y] = closest
            if closest in color_count:
                color_count[closest] += 1
            else:
                color_count[closest] = 1
    return new_image, color_count


def create_rendering(file_name, color_map, map_size):
    image = Image.new('RGB', map_size)
    load = image.load()
    for x in range(map_size[0]):
        for y in range(map_size[1]):
            color_name = color_map[x, y]
            if color_name not in COLORS:
                raise Exception('Unknown color name: {}.'.format(color_name))
            color = COLORS[color_name]
            load[x, y] = color
    image.save(file_name)


def create_recipe(file_name, color_map, color_count):
    with open(file_name, 'w') as recipe:
        recipe.write('*** Wool Painting Recipe generated by mc-wool ***\n')
        recipe.write('Color Name     Required Wool Count\n')
        for color in color_count:
            recipe.write('{:<15}{}\n'.format(color, color_count[color]))
        recipe.write('\n')
        recipe.write('Coordinate     Wool Color\n')
        # in my test this will iter in order:
        # (0, 0) -> (0, 1) -> ... -> (0, x) -> (1, 0) -> ...
        for coord in color_map:
            recipe.write('{:<15}{}\n'.format(str(coord), color_map[coord]))


def main(argv):
    if len(argv) < 2:
        print('Input original image as command line argument.')
    else:
        original_name = argv[1]
        original = Image.open(original_name)
        if original.mode != 'RGB':
            raise Exception(
                'Image mode not supported: {}.'.format(original.mode))
        color_map, color_count = convert_image(original.load(), original.size,
            original.size)
        name, _ = path.splitext(original_name)
        create_rendering(name + '_rendering.png', color_map, original.size)
        create_recipe(name + '_recipe.txt', color_map, color_count)


if __name__ == '__main__':
    main(sys.argv)
